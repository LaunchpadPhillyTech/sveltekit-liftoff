generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lead {
  id          String   @id @default(cuid())
  email       String   @unique
  businessName String?
  phone       String?
  source      String   @default("hero")
  status      LeadStatus @default(NEW)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("leads")
}

model Analytics {
  id        String   @id @default(cuid())
  event     String
  data      Json?
  userAgent String?
  ip        String?
  createdAt DateTime @default(now())
  
  @@map("analytics")
}

model SocialProof {
  id        String   @id @default(cuid())
  message   String
  location  String
  type      ProofType
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  @@map("social_proof")
}

model Assessment {
  id            String           @id @default(cuid())
  candidateId   String
  candidate     Candidate        @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  status        AssessmentStatus @default(IN_PROGRESS)
  startTime     DateTime
  submissionTime DateTime?
  timeRemaining String?
  overallProgress Int            @default(0)
  submissions   Submission[]
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@map("assessments")
}

model Candidate {
  id              String       @id @default(cuid())
  firstName       String
  lastName        String
  email           String       @unique
  phone           String?
  linkedin        String?
  portfolio       String?
  additionalNotes String?
  consent         Boolean      @default(false)
  assessments     Assessment[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  @@map("candidates")
}

model Submission {
  id           String         @id @default(cuid())
  assessmentId String
  assessment   Assessment     @relation(fields: [assessmentId], references: [id], onDelete: Cascade)
  section      AssessmentSection
  data         Json
  progress     Int            @default(0)
  completed    Boolean        @default(false)
  files        SubmissionFile[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  @@map("submissions")
  @@unique([assessmentId, section])
}

model SubmissionFile {
  id           String     @id @default(cuid())
  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  fileName     String
  filePath     String
  fileType     String
  fileSize     Int
  uploadedAt   DateTime   @default(now())
  
  @@map("submission_files")
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  LOST
}

enum ProofType {
  SIGNUP
  SUCCESS
  LEADS
  BOOKING
  SALES
  CONVERSION
}

enum AssessmentStatus {
  IN_PROGRESS
  SUBMITTED
  UNDER_REVIEW
  COMPLETED
  EXPIRED
}

enum AssessmentSection {
  CLIENT_ACQUISITION
  TECHNICAL_SOLUTION
  PROMPT_ENGINEERING
  IMPLEMENTATION
}